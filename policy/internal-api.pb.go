// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal-api.proto

/*
Package policy is a generated protocol buffer package.

It is generated from these files:
	internal-api.proto

It has these top-level messages:
	PoliciesFilter
	PoliciesUpdate
	Policy
	App
*/
package policy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PoliciesUpdate_Method int32

const (
	PoliciesUpdate_REPLACE PoliciesUpdate_Method = 0
	PoliciesUpdate_UNION   PoliciesUpdate_Method = 1
)

var PoliciesUpdate_Method_name = map[int32]string{
	0: "REPLACE",
	1: "UNION",
}
var PoliciesUpdate_Method_value = map[string]int32{
	"REPLACE": 0,
	"UNION":   1,
}

func (x PoliciesUpdate_Method) String() string {
	return proto.EnumName(PoliciesUpdate_Method_name, int32(x))
}
func (PoliciesUpdate_Method) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// PoliciesFilter defines a set of apps to filter against
type PoliciesFilter struct {
	App []*App `protobuf:"bytes,1,rep,name=app" json:"app,omitempty"`
}

func (m *PoliciesFilter) Reset()                    { *m = PoliciesFilter{} }
func (m *PoliciesFilter) String() string            { return proto.CompactTextString(m) }
func (*PoliciesFilter) ProtoMessage()               {}
func (*PoliciesFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PoliciesFilter) GetApp() []*App {
	if m != nil {
		return m.App
	}
	return nil
}

// PoliciesUpdate describes a change to apply to a set of policies
type PoliciesUpdate struct {
	// How to apply this update to the existing state
	Method PoliciesUpdate_Method `protobuf:"varint,1,opt,name=method,enum=policy.PoliciesUpdate_Method" json:"method,omitempty"`
	// The other corner of the rectangle.
	Policy []*Policy `protobuf:"bytes,2,rep,name=policy" json:"policy,omitempty"`
}

func (m *PoliciesUpdate) Reset()                    { *m = PoliciesUpdate{} }
func (m *PoliciesUpdate) String() string            { return proto.CompactTextString(m) }
func (*PoliciesUpdate) ProtoMessage()               {}
func (*PoliciesUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PoliciesUpdate) GetMethod() PoliciesUpdate_Method {
	if m != nil {
		return m.Method
	}
	return PoliciesUpdate_REPLACE
}

func (m *PoliciesUpdate) GetPolicy() []*Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

// A policy to enforce
type Policy struct {
	Source      *App   `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Destination *App   `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	Protocol    string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	PortRange   string `protobuf:"bytes,4,opt,name=port_range,json=portRange" json:"port_range,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Policy) GetSource() *App {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Policy) GetDestination() *App {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *Policy) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Policy) GetPortRange() string {
	if m != nil {
		return m.PortRange
	}
	return ""
}

type App struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *App) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*PoliciesFilter)(nil), "policy.PoliciesFilter")
	proto.RegisterType((*PoliciesUpdate)(nil), "policy.PoliciesUpdate")
	proto.RegisterType((*Policy)(nil), "policy.Policy")
	proto.RegisterType((*App)(nil), "policy.App")
	proto.RegisterEnum("policy.PoliciesUpdate_Method", PoliciesUpdate_Method_name, PoliciesUpdate_Method_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InternalAPI service

type InternalAPIClient interface {
	// WatchPolicies provides a snapshot followed by an event stream
	WatchPolicies(ctx context.Context, in *PoliciesFilter, opts ...grpc.CallOption) (InternalAPI_WatchPoliciesClient, error)
}

type internalAPIClient struct {
	cc *grpc.ClientConn
}

func NewInternalAPIClient(cc *grpc.ClientConn) InternalAPIClient {
	return &internalAPIClient{cc}
}

func (c *internalAPIClient) WatchPolicies(ctx context.Context, in *PoliciesFilter, opts ...grpc.CallOption) (InternalAPI_WatchPoliciesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InternalAPI_serviceDesc.Streams[0], c.cc, "/policy.InternalAPI/WatchPolicies", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalAPIWatchPoliciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InternalAPI_WatchPoliciesClient interface {
	Recv() (*PoliciesUpdate, error)
	grpc.ClientStream
}

type internalAPIWatchPoliciesClient struct {
	grpc.ClientStream
}

func (x *internalAPIWatchPoliciesClient) Recv() (*PoliciesUpdate, error) {
	m := new(PoliciesUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for InternalAPI service

type InternalAPIServer interface {
	// WatchPolicies provides a snapshot followed by an event stream
	WatchPolicies(*PoliciesFilter, InternalAPI_WatchPoliciesServer) error
}

func RegisterInternalAPIServer(s *grpc.Server, srv InternalAPIServer) {
	s.RegisterService(&_InternalAPI_serviceDesc, srv)
}

func _InternalAPI_WatchPolicies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PoliciesFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalAPIServer).WatchPolicies(m, &internalAPIWatchPoliciesServer{stream})
}

type InternalAPI_WatchPoliciesServer interface {
	Send(*PoliciesUpdate) error
	grpc.ServerStream
}

type internalAPIWatchPoliciesServer struct {
	grpc.ServerStream
}

func (x *internalAPIWatchPoliciesServer) Send(m *PoliciesUpdate) error {
	return x.ServerStream.SendMsg(m)
}

var _InternalAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "policy.InternalAPI",
	HandlerType: (*InternalAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchPolicies",
			Handler:       _InternalAPI_WatchPolicies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal-api.proto",
}

func init() { proto.RegisterFile("internal-api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0x97, 0x56, 0xab, 0xbd, 0xc5, 0x32, 0x2e, 0x38, 0xca, 0x60, 0x50, 0x2a, 0xc8, 0x5e,
	0x56, 0x65, 0xe2, 0x0f, 0x28, 0x63, 0xc2, 0x40, 0xe7, 0x08, 0x0c, 0x1f, 0x25, 0xb6, 0xc1, 0x05,
	0x6a, 0x13, 0xb2, 0xf8, 0xb0, 0x9f, 0xe1, 0x93, 0x7f, 0x57, 0x9a, 0xb6, 0xea, 0xa6, 0x6f, 0xc9,
	0x3d, 0xe7, 0x90, 0x93, 0xef, 0x02, 0x8a, 0xca, 0x70, 0x5d, 0xb1, 0x72, 0xc2, 0x94, 0x48, 0x95,
	0x96, 0x46, 0xa2, 0xa7, 0x64, 0x29, 0xf2, 0x5d, 0x72, 0x05, 0xe1, 0xaa, 0x3e, 0x09, 0xbe, 0xbd,
	0x13, 0xa5, 0xe1, 0x1a, 0x47, 0xe0, 0x32, 0xa5, 0x22, 0x12, 0xbb, 0xe3, 0x60, 0x1a, 0xa4, 0x8d,
	0x2f, 0xcd, 0x94, 0xa2, 0xf5, 0x3c, 0xf9, 0x20, 0x3f, 0x89, 0xb5, 0x2a, 0x98, 0xe1, 0x78, 0x0b,
	0xde, 0x1b, 0x37, 0x1b, 0x59, 0x44, 0x24, 0x26, 0xe3, 0x70, 0x3a, 0xea, 0x42, 0xfb, 0xbe, 0xf4,
	0xc1, 0x9a, 0x68, 0x6b, 0xc6, 0x4b, 0x68, 0x4b, 0x44, 0x8e, 0x7d, 0x2b, 0xdc, 0x8b, 0xed, 0x68,
	0x57, 0x31, 0x06, 0xaf, 0x49, 0x62, 0x00, 0x27, 0x74, 0xbe, 0xba, 0xcf, 0x66, 0xf3, 0x7e, 0x0f,
	0x7d, 0x38, 0x5e, 0x2f, 0x17, 0x8f, 0xcb, 0x3e, 0x49, 0x3e, 0x09, 0x78, 0x4d, 0x08, 0x2f, 0xc0,
	0xdb, 0xca, 0x77, 0x9d, 0x73, 0xdb, 0xe5, 0xe0, 0x03, 0xad, 0x84, 0x13, 0x08, 0x0a, 0xbe, 0x35,
	0xa2, 0x62, 0x46, 0xc8, 0x2a, 0x72, 0xfe, 0x3a, 0x7f, 0xeb, 0x38, 0x84, 0x53, 0x0b, 0x2d, 0x97,
	0x65, 0xe4, 0xc6, 0x64, 0xec, 0xd3, 0xef, 0x3b, 0x8e, 0x00, 0x94, 0xd4, 0xe6, 0x59, 0xb3, 0xea,
	0x95, 0x47, 0x47, 0x56, 0xf5, 0xeb, 0x09, 0xad, 0x07, 0xc9, 0x39, 0xb8, 0x99, 0x52, 0x18, 0x82,
	0x23, 0x1a, 0x3a, 0x3e, 0x75, 0x44, 0x31, 0xa5, 0x10, 0x2c, 0xda, 0x9d, 0x64, 0xab, 0x05, 0xce,
	0xe0, 0xec, 0x89, 0x99, 0x7c, 0xd3, 0xf1, 0xc2, 0xc1, 0x21, 0xc1, 0x66, 0x37, 0xc3, 0xc1, 0xff,
	0x64, 0x93, 0xde, 0x35, 0x79, 0xf1, 0x6c, 0xa7, 0x9b, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f,
	0x5a, 0xf6, 0x89, 0xee, 0x01, 0x00, 0x00,
}
